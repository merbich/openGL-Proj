#version 330 core
out vec4 FragColor;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
struct Light {
	vec3 position;
	vec3 direction;
	float cutOff;
	float cutOffOuter;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
    float linear;
    float quadratic;
};

in vec3 Normal;
in vec3 objPosition;
in vec2 TexCoords;

uniform Material material;
uniform Light light;
uniform vec3 cameraPos;
uniform float time;

void main()
{
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

	vec3 norm = normalize(Normal);
	vec3 lightDirection = normalize(light.position - objPosition);
	
	vec3 diffuse = (max(dot(norm, lightDirection), 0.0) * vec3(texture(material.diffuse, TexCoords))) * light.diffuse;

	vec3 cameraDirection = normalize(cameraPos - objPosition);
	vec3 reflectDirection = reflect(-cameraDirection, norm);
	float spec = pow(max(dot(cameraDirection, reflectDirection), 0.0), material.shininess);
	vec3 specular = light.specular * (vec3(texture(material.specular, TexCoords)) * spec);

	float theta = dot(lightDirection, normalize(-light.direction));
	float epsilon = light.cutOff - light.cutOffOuter;
	float intensity = clamp((theta - light.cutOffOuter)/ epsilon, 0.0, 1.0);

	diffuse *= intensity;
	specular *= intensity;

	// attenuation
    float distance    = length(light.position - objPosition);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    ambient  *= attenuation; 
    diffuse   *= attenuation;
    specular *= attenuation;   

	vec3 resultObjColor = (specular + diffuse + ambient);
	FragColor = vec4(resultObjColor, 1.0);
	
}