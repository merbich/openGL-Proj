#version 330 core
out vec4 FragColor;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emission;
	float shininess;
};
struct Light {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 Normal;
in vec3 objPosition;
in vec2 TexCoords;

uniform Material material;
uniform Light light;
uniform vec3 cameraPos;
uniform float time;

void main()
{
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

	vec3 norm = normalize(Normal);
	vec3 lightDirection = normalize(light.position - objPosition);
	vec3 diffuse = (max(dot(norm, lightDirection), 0.0) * vec3(texture(material.diffuse, TexCoords))) * light.diffuse;

	vec3 cameraDirection = normalize(cameraPos - objPosition);
	vec3 reflectDirection = reflect(-cameraDirection, norm);
	float spec = pow(max(dot(cameraDirection, reflectDirection), 0.0), material.shininess);
	vec3 specular = light.specular * (vec3(texture(material.specular, TexCoords)) * spec);

	vec3 emission = vec3(0.0);
    if (texture(material.specular, TexCoords).r == 0.0)   /*rough check for blackbox inside spec texture */
    {
        /*apply emission texture */
        emission = texture(material.emission, TexCoords).rgb;
        
        /*some extra fun stuff with "time uniform" */
        emission = texture(material.emission, TexCoords + vec2(0.0,time/2.5f)).rgb;   /*moving */
        emission = emission * (sin(time) * 0.5 + 0.5) * 2.0;                     /*fading */
    }

	vec3 resultObjColor = specular + diffuse + ambient + emission;
	FragColor = vec4(resultObjColor, 1.0);
}